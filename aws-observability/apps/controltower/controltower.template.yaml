AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "The Template should be deployed in Master account. This template setup the Lambda trigger for new account created using AWS Control Tower Account Factory process. The Lambda install the AWS Observability CF template on the regions of new AWS account using stack Sets."

Globals:
  Function:
    Timeout: 300
    MemorySize: 128

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: "1. Sumo Logic Access Configuration (Required)"
        Parameters:
          - Section1aSumoLogicDeployment
          - Section1bSumoLogicAccessID
          - Section1cSumoLogicAccessKey
          - Section1dSumoLogicOrganizationId

      - Label:
          default: "2. Regions to Monitor"
        Parameters:
          - Section2aRegions

    ParameterLabels:
      Section1aSumoLogicDeployment:
        default: "Sumo Logic Deployment Name"
      Section1bSumoLogicAccessID:
        default: "Sumo Logic Access ID"
      Section1cSumoLogicAccessKey:
        default: "Sumo Logic Access Key"
      Section1dSumoLogicOrganizationId:
        default: "Sumo Logic Organization Id"

      Section2aRegions:
        default: "List of AWS Regions"

Parameters:
  Section1aSumoLogicDeployment:
    Type: String
    AllowedValues:
      - au
      - ca
      - de
      - eu
      - jp
      - us2
      - us1
      - in
      - fed
    Description: "Enter au, ca, de, eu, jp, us2, in, fed or us1. Visit https://help.sumologic.com/APIs/General-API-Information/Sumo-Logic-Endpoints-and-Firewall-Security"
  Section1bSumoLogicAccessID:
    Type: String
    Description: "Sumo Logic Access ID. Visit https://help.sumologic.com/Manage/Security/Access-Keys#Create_an_access_key"
    AllowedPattern: ".+"
    ConstraintDescription: "Sumo Logic Access ID can not be empty."
  Section1cSumoLogicAccessKey:
    Type: String
    Description: "Sumo Logic Access Key."
    AllowedPattern: ".+"
    ConstraintDescription: "Sumo Logic Access Key can not be empty."
    NoEcho: true
  Section1dSumoLogicOrganizationId:
    Description: "Appears on the Account Overview page that displays information about your Sumo Logic organization. Used for IAM Role in Sumo Logic AWS Sources. Visit https://help.sumologic.com/01Start-Here/05Customize-Your-Sumo-Logic-Experience/Preferences-Page"
    Type: String
    AllowedPattern: ".+"
    ConstraintDescription: "Sumo Logic Organization Id can not be empty."

  Section2aRegions:
    Description: "Provide a list of Comma Separated AWS Regions where you would like to deploy Sumo Logic AWS Observability Solution when a new AWS account is created using Control Tower Account Factory settings. Default value is :- us-east-1, us-east-2, us-west-1, us-west-2, af-south-1, ap-east-1, ap-south-1, ap-northeast-1, ap-northeast-2, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-west-1, eu-west-2, eu-west-3, eu-south-1, eu-north-1, me-south-1, sa-east-1"
    Type: String
    ConstraintDescription: "Regions list cannot be empty."
    AllowedPattern: ".+"
    Default: "us-east-1, us-east-2, us-west-1, us-west-2, af-south-1, ap-east-1, ap-south-1, ap-northeast-1, ap-northeast-2, ap-southeast-1, ap-southeast-2, ca-central-1, eu-central-1, eu-west-1, eu-west-2, eu-west-3, eu-south-1, eu-north-1, me-south-1, sa-east-1"

Mappings:
  AWSControlTower:
    ExecutionRole:
      Name: "AWSControlTowerExecution"

Resources:

  LambdaRoleToCaptureEvents:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
            Condition: {}
      Path: /
      Policies:
        - PolicyName: inline-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:CreateStackInstances'
                  - 'cloudformation:CreateStackSet'
                  - 'cloudformation:UpdateStackInstances'
                Resource: !Join [':',['arn:aws:cloudformation:*', !Ref 'AWS::AccountId', 'stackset/*:*']]
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: "*"
        - PolicyName: State-Machine-Lambda-Policy-IAM
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:GetRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/AWSControlTowerStackSetRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  TriggerCustomizationsOnLifeCycleEvent:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          import re
          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)
          stackSetName = 'SUMO-LOGIC-AWS-OBSERVABILITY'
          templateURL = "https://sumologic-appdev-aws-sam-apps.s3.amazonaws.com/sumologic_observability.master.template.yaml"
          ALL = ["CAPABILITY_IAM", "CAPABILITY_NAMED_IAM", "CAPABILITY_AUTO_EXPAND"]
          result = {"ResponseMetadata":{"HTTPStatusCode":"400"}}

          def lambda_handler(event, context):
              LOGGER.info('Inside the Handler with event as {}'.format(event))
              eventDetails = event['detail']
              regionName = eventDetails['awsRegion']
              eventName = eventDetails['eventName']
              srvEventDetails = eventDetails['serviceEventDetails']
              if eventName == 'CreateManagedAccount':
                  newAccInfo = srvEventDetails['createManagedAccountStatus']
              elif eventName == 'UpdateManagedAccount':
                  newAccInfo = srvEventDetails['updateManagedAccountStatus']

              cmdStatus = newAccInfo['state']
              if cmdStatus == 'SUCCEEDED':
                accName = newAccInfo['account']['accountName']
                accId = newAccInfo['account']['accountId']
                accName = re.sub('[^a-z0-9]+', '', accName.lower())
                parameters = [{"ParameterKey": "Section1aSumoLogicDeployment", "ParameterValue": os.environ['Section1aSumoLogicDeployment']},
                              {"ParameterKey": "Section1bSumoLogicAccessID", "ParameterValue": os.environ['Section1bSumoLogicAccessID']},
                              {"ParameterKey": "Section1cSumoLogicAccessKey", "ParameterValue": os.environ['Section1cSumoLogicAccessKey']},
                              {"ParameterKey": "Section1dSumoLogicOrganizationId", "ParameterValue": os.environ['Section1dSumoLogicOrganizationId']},
                              {"ParameterKey": "Section3aInstallObservabilityApps", "ParameterValue": "No"},
                              {"ParameterKey": "Section6aCreateCloudTrailLogSource", "ParameterValue": "No"},
                              {"ParameterKey": "Section2aAccountAlias", "ParameterValue": accName[0:30]}]

                regions = [x.strip() for x in os.environ['Section2aRegions'].split(",")]
                cf_client = boto3.client('cloudformation', regionName)
                if eventName == 'CreateManagedAccount':
                    try:
                      description = "The Stack instances are added when a new AWS account is created using AWS Control Tower Account factory process. The Stack Sets sets up the AWS Observability CloudFormation template on the AWS accounts and AWS Regions."
                      response = cf_client.create_stack_set(StackSetName=stackSetName, Description=description, TemplateURL=templateURL,
                                                            Capabilities=ALL, Parameters=parameters, AdministrationRoleARN=os.environ['ADMINISTRATION_ROLE_ARN'], ExecutionRoleName=os.environ['EXECUTION_ROLE_NAME'])
                      LOGGER.info('Stack Set Created with Name {} in Region {}'.format(stackSetName, regionName))
                      response = cf_client.create_stack_instances(StackSetName=stackSetName, Accounts=[accId], Regions=regions, ParameterOverrides=parameters)
                    except cf_client.exceptions.NameAlreadyExistsException:
                      response = cf_client.create_stack_instances(StackSetName=stackSetName, Accounts=[accId], Regions=regions, ParameterOverrides=parameters)
                elif eventName == 'UpdateManagedAccount':
                    response = cf_client.update_stack_instances(StackSetName=stackSetName, Accounts=[accId], Regions=regions, ParameterOverrides=parameters)
                LOGGER.info('Stack Instance updated to the Stack Set with parameters {}'.format(parameters))
              else:
                LOGGER.info('Unsucessful Event Recieved. SKIPPING :{}'.format(event))
                return(False)
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt "LambdaRoleToCaptureEvents.Arn"
      Runtime: python3.7
      Timeout: 60
      Environment:
        Variables:
          Section1aSumoLogicDeployment: !Ref Section1aSumoLogicDeployment
          Section1bSumoLogicAccessID: !Ref Section1bSumoLogicAccessID
          Section1cSumoLogicAccessKey: !Ref Section1cSumoLogicAccessKey
          Section1dSumoLogicOrganizationId: !Ref Section1dSumoLogicOrganizationId
          ADMINISTRATION_ROLE_ARN: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/AWSControlTowerStackSetRole
          EXECUTION_ROLE_NAME: !FindInMap [AWSControlTower, ExecutionRole, Name]
          Section2aRegions: !Ref Section2aRegions

  CreateManagedAccountPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "CreateManagedAccountEventRule.Arn"

  CreateManagedAccountEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events and Trigger an Action
      EventPattern:
        detail:
          eventName:
            - CreateManagedAccount
          eventSource:
            - controltower.amazonaws.com
        detail-type:
          - AWS Service Event via CloudTrail
        source:
          - aws.controltower
      Name: AWSObservabilityCreateAccountEvent
      State: ENABLED
      Targets:
        - Arn: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
          Id: IDCaptureControlTowerLifeCycleEvents

  UpdateManagedAccountPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt "UpdateManagedAccountEventRule.Arn"

  UpdateManagedAccountEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Capture Control Tower LifeCycle Events and Trigger an Action
      EventPattern:
        detail:
          eventName:
            - UpdateManagedAccount
          eventSource:
            - controltower.amazonaws.com
        detail-type:
          - AWS Service Event via CloudTrail
        source:
          - aws.controltower
      Name: AWSObservabilityUpdateAccountEvent
      State: ENABLED
      Targets:
        - Arn: !GetAtt "TriggerCustomizationsOnLifeCycleEvent.Arn"
          Id: IDCaptureControlTowerLifeCycleEvents

Outputs:

  TriggerCustomizationsOnLifeCycleEvent:
    Description: "Lambda Function ARN"
    Value: !GetAtt TriggerCustomizationsOnLifeCycleEvent.Arn